#! /usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2018-2019 Garmin International or its subsidiaries
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import logging
import pyradur
import sys

def main():
    def proc_get(d, args):
        try:
            print(d[args.name])
            return 0
        except KeyError:
            return 1

    def proc_set(d, args):
        d[args.name] = args.value

    def proc_delete(d, args):
        try:
            del d[args.name]
            return 0
        except KeyError:
            return 1

    def proc_exists(d, args):
        if args.name in d:
            print("true")
        else:
            print("false")

    parser = argparse.ArgumentParser(description='Pyradur IPC Client')
    parser.add_argument('socket', help='Path to server socket')
    parser.add_argument('db', help='Database name')
    parser.add_argument('--debug', metavar='LEVEL', default='WARNING',
            help='Set debug log level. Default %(default)s')
    
    sub_parser = parser.add_subparsers(help='Subcommand')

    get_parser = sub_parser.add_parser('get', help='Get value')
    get_parser.add_argument('name', help='Variable name')
    get_parser.set_defaults(func=proc_get)

    set_parser = sub_parser.add_parser('set', help='Set value')
    set_parser.add_argument('name', help='Variable name')
    set_parser.add_argument('value', help='Variable value')
    set_parser.set_defaults(func=proc_set)

    delete_parser = sub_parser.add_parser('delete', help='Delete value')
    delete_parser.add_argument('name', help='Variable name')
    delete_parser.set_defaults(func=proc_delete)

    exists_parser = sub_parser.add_parser('exists', help='Check if key exists')
    exists_parser.add_argument('name', help='Variable name')
    exists_parser.set_defaults(func=proc_exists)

    args = parser.parse_args()

    root = logging.getLogger()
    root.setLevel(args.debug)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(args.debug)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    root.addHandler(handler)

    d = pyradur.Dict(args.socket, args.db)

    return args.func(d, args)

if __name__ == "__main__":
    sys.exit(main())
