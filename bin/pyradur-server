#! /usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2018-2019 Garmin International or its subsidiaries
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import logging
import pyradur.db
import pyradur.server
import sys

def main():
    parser = argparse.ArgumentParser(description='Pyradur IPC Server')
    parser.add_argument('socket', help='Path to server socket')
    parser.add_argument('--sqlite', metavar=('NAME', 'PATH'), nargs=2, 
            action='append', default=[], help='Add sqlite database')
    parser.add_argument('--debug', metavar='LEVEL', default='WARNING',
            help='Set debug log level. Default %(default)s')

    args = parser.parse_args()

    root = logging.getLogger()
    root.setLevel(args.debug)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(args.debug)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    root.addHandler(handler)

    server = pyradur.server.SockServer(args.socket)

    for s in args.sqlite:
        server.db.add_db(s[0], pyradur.db.Sqlite3DB(s[1]))

    server.serve_forever()

if __name__ == "__main__":
    sys.exit(main())
